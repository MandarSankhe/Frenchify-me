scalar Upload

type Mutation {
  createUser(input: UserInput!): User
  login(email: String!, password: String!): User
  forgotPassword(email: String!): String
  resetPassword(token: String!, newPassword: String!): String
  submitTestScore(input: TestScoreInput!): History

  createWritingMatch(input: CreateWritingMatchInput!): WritingMatch
  acceptWritingMatch(matchId: ID!, opponentId: ID!): WritingMatch
  submitWritingMatchAnswer(input: SubmitWritingMatchAnswerInput!): WritingMatch
  finalizeWritingMatch(matchId: ID!): WritingMatch
  updateUser(id: ID!, input: UserUpdateInput!, profileImage: Upload): User
  createDonation(input: DonationInput!): Donation!
}

input UserInput {
  username: String!
  email: String!
  password: String!
  languageLevel: String
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  languageLevel: String!
}

type User {
  id: ID!
  username: String!
  email: String!
  languageLevel: String
  profileImage: String
  progress: Progress!
  createdAt: String!
}

type Progress {
  reading: Int
  writing: Int
  listening: Int
  speaking: Int
}

# Simplified TCFReading type
type TCFReading {
  id: ID!
  title: String!
  documents: [DocumentSet!]!
  level: String!
  createdAt: String!
}

type TCFSpeaking {
  id: ID!
  topic: String!
  mainQuestion1: String!
  mainQuestion2: String!
  mainQuestion3: String!
  createdAt: String!
}

type DocumentSet {
  document: Document!
  questions: [Question!]!
}

type Document {
  title: String!
  type: String!
  content: String!
}

type Question {
  questionText: String!
  options: [String!]!
  correctAnswer: String!
}

type Donation {
  id: ID!
  fullName: String!
  email: String!
  amount: Float!
  message: String
  createdAt: String!
  invoiceNumber: String!
}

enum TestModelName {
  TcfReading
  TcfWriting
  TcfListeningTraining
  TcfListening
  TcfSpeaking
}

type History {
  id: ID!
  userId: ID!
  testModelName: TestModelName!
  testId: ID!
  score: Int!
  createdAt: String!
}

input TestScoreInput {
  userId: ID!
  testModelName: TestModelName!
  testId: ID!
  score: Int!
}

#20Feb2024
type TCFWriting {
  id: ID!
  title: String!
  level: String!
  exercise1: String!
  exercise2: String!
  exercise3: String!
  createdAt: String!
}

type WritingMatch {
  id: ID!
  examId: ID!
  examTitle: String!
  examQuestion: String!
  initiator: User!
  opponent: User!
  initiatorAnswer: String
  opponentAnswer: String
  initiatorFeedback: String
  opponentFeedback: String
  status: String!   # "pending", "active", "completed"
  createdAt: String!
}

input CreateWritingMatchInput {
  initiatorId: ID!
  opponentUsername: String!
  examId: ID!
  examTitle: String!
  examQuestion: String!
}

input SubmitWritingMatchAnswerInput {
  matchId: ID!
  userId: ID!
  answer: String!
}

input DonationInput {
  fullName: String!
  email: String!
  amount: Float!
  message: String
}

type ValidateResetTokenResponse {
    valid: Boolean!
    message: String!
  }

type TCFListeningTraining {
  id: ID!
  title: String!
  difficulty: String!
  questions: [ListeningTrainingQuestion!]!
  createdAt: String!
}

type ListeningTrainingQuestion {
  audioText: String!
  questionText: String!
  options: [String!]!
  correctAnswer: String!
}

type TCFListening {
  id: ID!
  title: String!
  difficulty: String!
  passages: [Passage!]!
  totalQuestions: Int!
  createdAt: String!
}

type Passage {
  passageText: String!
  questions: [ListeningQuestion!]!
}

type ListeningQuestion {
  questionText: String!
  options: [String!]!
  correctAnswer: String!
}


type Query {
  users: [User]
  tcfReadings: [TCFReading]
  testHistories(userId: ID!): [History]
  tcfWritings: [TCFWriting] #20Feb2024
  pendingMatches(userId: ID!): [WritingMatch]
  match(matchId: ID!): WritingMatch
  validateResetToken(token: String!): ValidateResetTokenResponse!
  tcfSpeakings: [TCFSpeaking]!
  tcfListeningtrainings: [TCFListeningTraining]!
  tcfListenings: [TCFListening]! 
}
